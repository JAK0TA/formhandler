plugin.tx_formhandler_form.settings.predefinedForms.devExample {
  formId = DevExampleForm
  formName = Dev Example Form
  formValuesPrefix = DevExampleForm
  langFileDefault = locallang_example_form.xlf
  templateForm = 
  templateMailHtml = DevExampleForm/MailHtml
  templateMailText = DevExampleForm/MailText

  fileUpload {
    nameCleanUp {
      search = /[^A-Za-z0-9_.-]/
      separator = 
      replace = 
      usePregReplace = true
    }
    removal {
      active = true
      text = X
    }
    total {
      countMax = 3
      sizeMax = 5242880
    }
    withSameName = ignore
  }

  preProcessors {
    setSalutations {
      model = SetSelectOptionsPreProcessor
      config {
        name = salutation
        options {
          mr {
            value = mr
            title = Mr.
          }
          mrs {
            value = mrs
            title = Mrs.
          }
        }
      }
    }
    setCountry {
      model = SetSelectOptionsPreProcessor
      config {
        name = country
        options {
          DE {
            value = DE
            title = Germany
          }
          USA {
            value = USA
            title = United States of America
          }
        }
      }
    }
  }

  debuggers {
    VarDumpDebugger {
      model = PrintToScreenDebugger
      config {
        active = true
        maxDepth = 12
      }
    }
  }

  loggers {
    Database {
      model = DatabaseLogger
    }
  }

  conditionBlocks {
    1 {
      conditions.OR1.AND1 = 1.customer.postalCode=18055
      isTrue {
        disableErrorCheckFields = 1.customer.lastname
      }
    }
    2 {
      conditions.OR1.AND1 = 1.customer.postalCode=12345
      isTrue {
        disableErrorCheckFields = 1.customer.screenshot2
      }
      else {
        disableErrorCheckFields = 
      }
    }
  }

  steps {
    1 {
      templateForm = DevExampleForm/DevExampleHTMLStep1
      validators {
        DefaultValidator {
          model = DefaultValidator
          config {
            disableErrorCheckFields {
              customer.screenshot1 = FileRequired,FileCountMax
              customer.email = Required
            }
            messageLimit = 1
            messageLimits {
              customer.screenshot1 = 2
              customer.email = 2
            }
            fields {
              customer.fields {
                screenshot1.errorChecks {
                  fileTypes {
                    model = FileTypes
                    fileTypes = .jpg
                  }
                  fileCountMax {
                    model = FileCountMax
                    fileCountMax = 5
                  }
                  fileCountMin {
                    model = FileCountMin
                    fileCountMin = 2
                  }
                }
                screenshot2.errorChecks {
                  fileTypes {
                    model = FileTypes
                    fileTypes = image/*
                  }
                  fileCountMax {
                    model = FileCountMax
                    fileCountMax = 1
                  }
                  fileRequired {
                    model = FileRequired
                  }
                  fileSizeMax {
                    model = FileSizeMax
                    fileSizeMax = 2097152
                  }
                  fileSizeMin {
                    model = FileSizeMin
                    fileSizeMin = 1048576
                  }
                }
                salutation.errorChecks {
                  required {
                    model = Required
                  }
                }
                firstname.errorChecks {
                  lengthMax {
                    model = LengthMax
                    lengthMax = 20
                  }
                  lengthMin {
                    model = LengthMin
                    lengthMin = 10
                  }
                }
                lastname.errorChecks {
                  required {
                    model = Required
                  }
                  lengthMax {
                    model = LengthMax
                    lengthMax = 20
                  }
                }
                streetAddress.errorChecks {
                  required {
                    model = Required
                  }
                }
                postalCode.errorChecks {
                  required {
                    model = Required
                  }
                }
                city.errorChecks {
                  required {
                    model = Required
                  }
                  lengthMax {
                    model = LengthMax
                    lengthMax = 70
                  }
                }
                country.errorChecks {
                  required {
                    model = Required
                  }
                }
                telephone.errorChecks {
                  required {
                    model = Required
                  }
                  lengthMax {
                    model = LengthMax
                    lengthMax = 20
                  }
                }
                email.errorChecks {
                  required {
                    model = Required
                  }
                  lengthMax {
                    model = LengthMax
                    lengthMax = 50
                  }
                  email {
                    model = Email
                  }
                }
              }
            }
          }
        }
      }
    }
    2 {
      templateForm = DevExampleForm/DevExampleHTMLStep2
      validators {
        DefaultValidator {
          model = DefaultValidator
          config {
            fields {

              booking.fields {
                cabins {
                  fieldArray = true
                  fields {
                    persons {
                      fieldArray = true
                      fields {
                        salutation.errorCheck {
                          required {
                            model = Required
                          }
                        }

                        firstname.errorCheck {
                          required {
                            model = Required
                          }
                          lengthMax {
                            model = LengthMax
                            lengthMax = 255
                          }
                        }

                        lastname.errorCheck {
                          required {
                            model = Required
                          }
                          lengthMax {
                            model = LengthMax
                            lengthMax = 255
                          }
                        }
                      }
                    }
                  }
                  errorCheck {
                    required {
                      model = Required
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    3 {
      templateForm = DevExampleForm/DevExampleHTMLStep3
      validators {
        DefaultValidator {
          model = DefaultValidator
          config {
            fields {
              payment.fields.direct.fields {
                salutation.errorCheck {
                  required {
                    model = Required
                  }
                }

                firstname.errorCheck {
                  required {
                    model = Required
                  }
                  lengthMax {
                    model = LengthMax
                    lengthMax = 255
                  }
                }

                lastname.errorCheck {
                  required {
                    model = Required
                  }
                  lengthMax {
                    model = LengthMax
                    lengthMax = 255
                  }
                }

                country.errorCheck {
                  required {
                    model = Required
                  }
                  lengthMax {
                    model = LengthMax
                    lengthMax = 255
                  }
                }

                email.errorCheck {
                  lengthMax {
                    model = LengthMax
                    lengthMax = 255
                  }
                  email {
                    model = Email
                  }
                }
              }
            }
          }
        }
      }
    }
    4 {
      templateForm = DevExampleForm/DevExampleHTMLStep4
      validators {
        DefaultValidator {
          model = DefaultValidator
          config {
            fields {
              message.errorChecks {
                required {
                  model = Required
                }
              }

              privacy_policy.errorChecks {
                required {
                  model = Required
                }
                containsOne {
                  model = ContainsOne
                  words = Yes,Ja
                }
              }
            }
          }
        }
      }
    }
  }

  finishers {
    Mail {
      model = MailFinisher
      config {
        // settings for either the user oder admin mails
        user {
          // Email type specifig way of defining a mail template. This should be the preffered way as you can seperate the admin and user mail
          // Using the emailType (can be "user" and "admin") variable would alternatively make having both templates in one file possible.
          templateMailHtml = DevExampleForm/MailHtml

          // overrides
          senderEmail = test@mail

          // merges with plugin options
          toEmail = recipient@mail
          replyToEmail = test1@mail, test2@mail, test3@mail
          // should be the same amount of names as email addresses, but can be less
          replyToName = Testmail 1, Testmail 2, Testmail 3

          embedFiles {
            // the key (file1 or file2) is also the CID used for embedding
            file1 {
              file = fileadmin/formhandler/file1.jpg
              mime = image/jpeg 
            }
            file2 {
              file = fileadmin/formhandler/file2.png
              mime = image/png
            }
          }

          attachments {
            userupload {
              file = 1.customer.screenshot1
              renameTo = user_file
            }
            static_file {
              file = static/file/path.jpg
              mime = image/jpeg 
            }
          }
        }
      }
    }   
    Redirect {
      model = RedirectFinisher
      config {
        returns = true
        correctRedirectUrl = false
        additionalParams {
          postal_code = 1.customer.postalCode
          queryParam2 = valueIfNotFoundAsFieldName
        }
      }
    }
  }
}
